ng-4.0 学习

----------------------
AngularJs优点：
	模板功能强大丰富
	比较完善的前端MVC框架
	引入了java的一些概念

AngularJs问题：
	性能（主要是双向数据绑定，dirty checking）
	路由（路由不能嵌套）
	作用域（$scope，）
	表单验证
	javascript（没有类型系统，）
	学习成本高
构成：视图，控制器，数据模型


----------------------------
Angular核心：组件

Angular特性：
	AngularCLI(骨架，开发服务器，生成组件的基本代码)
	服务器端渲染（提升SEO效果，渲染速度快）
	移动和桌面兼容（还提供了一个ui库）

构成：组件树

--------------
React是一个视图层的东西。
Vue优点:简单，易学，灵活，尺寸小，性能好。非常优秀
Vue缺点：个人主导的项目经费精力，只关注Web，




----------------------------------------------------------------------------------
【angular程序架构】
【搭建开发环境】


ng程序架构：看图。
	至少需要包含一个NgModule和一个组件。

组件：是ng应用的基本构建块，可以把一个组件理解为一段带有业务逻辑和数据的Html
	组件可以嵌套。
	组件可以调用服务

服务：封装可重用的业务逻辑。
	服务可以调用服务。

指令：允许你向Html元素添加自定义行为。
	框架内置了大量的指令。

模块：将应用中的不用部分组织成ng可以理解的单元的一种方式。
	组装（比如：组件+服务+指令==汽车/登录模块）

组件、服务、指令是用来完成功能的。

-----------------------
组件必备3元素：
1组件元数据装饰器 @componnet：告诉框架如何处理一个ts类。
	所有的组件都必须使用 @componet 注解。

2模板：定义组件的外观，以Html的形式存在。
	模板展现控制器的数据

3控制器：，它会被装饰器装饰的一个普通的ts类，页面逻辑就是写在控制器里。
	它包含与模板相关的所有属性和方法。
	控制器通过数据绑定与模板通信
	控制器处理模板上发生的事件

组件非必备要素：
可选的注入对象：
	输入属性 @inputs() ：用来接收外部传入的数据 
	提供器 providers ：用来做依赖注入的
	生命周期钩子 ：组件从创建到销毁中有多个钩子，
样式表：
动画：
输出属性：@ Outputs

-------------------------------
搭建开发环境：nodejs，

------------------------------
模块：模块也是一个带有 @NgModule 装饰器的ts类；

注意：装饰器元数据declarations中只能声明组件、指令、管道；
	providers中只能声明服务。

----------------
ng的启动过程：
.angular-cli.json
启动时加载的页面？
启动时加载的脚本？

.angular-cli.json中指定的资源根文件的根目录是src目录。
非cdn的css文件在.angular-cli.json中配置
cdn的css在全局的src/style.css中用 @import引入


----------------------------------------------------------------------
【路由：Angular Route
子路由，保护路由，辅助路由。
spa:主页面只加载一次，每次都是只改变页面中部分内容。
ng new app-name  --routing
路由相关的对象：
	Routes:路由配置
	RouterOutlet:html中指定组件展示的位置。
	Router://js中用 跳转页面
	RouterLink://html中用 跳转页面
	ActivetedRoute://路由活动对象，用来获取路由信息

	配置路由path不要/开头，ng会自己知道怎么处理
	但是：html中<a [routerLink]="['/']">首页</a>需要/开头
	
Router哪儿来？
	constructor(private router:Router){
		//这样就可以拿到Router对象
	}
	resClick(){
		this.router.navigate(['/stock']);
	}
ActivitedRoute哪儿来？
	private stockId:number;
	constructor(private routeInfo:ActivitedRoute){

	}
	ngOnInit(){
		//路由时传递数据方式1
		this.stockId=this.routeIfo.snapshot.queryParams['id'];
		//路由时传递数据方式2
		this.stockId=this.routeIfo.snapshot.params['id'];
	}
	<p>{{stockId}}</p>




通配符配置路由：
	//用户输入不存在的路径，导航到某个特定的页面
	//注意通配符要写在最后面，系统是从前向后匹配的。
	{path:"**",component:AppComp}

路由时传递数据：
	1、传递参数：/stock?id=2&name='haha'
	实际要这样写：<a [routerLink]="['/stock']" [queryParams]="{id:1}">
	获取参数：ActivitedRoute.queryParams[id];
	2、配置：{path:"stock/:id"} 
	传递：stock/1 
	实际上这样写：<a [routerLink]="['/stock',1]">
	获取：ActivitedRoute.params[id];
	3、配置：{path:"",data:[{isOk:true,xx:'yy'},{...}]}
	获取：ActivitedRoute.data[0]['xx']
	注意：data一定是一个数组。

参数订阅：
不同组件之间切换，组件会创建，会执行ngOnInit
danshi同一个组件路由到自身，组件没有被创建，不会执行ngOnInit
解决：
	ngOnInit(){
		//每当路由参数改变都会执行订阅里面的匿名函数。
		this.routeInfo.params.subscribe((params:Params)=>this.stockId=params['id'];);
		//snapshot 只会组件在初始创建时执行一次
	}

重定向路由：
	www.abc.com=>www.abc.com/buy
	www.abc.com/x=>www.abc.com/y
	{path:"",redirectTo:"/home",pathMatch:"full"}一定是空才会重定向
	{path:"xx",redirectTo:"/home",pathMatch:"prefix"}只要是xx开头就会重定向

路由嵌套/子路由：
	{path:"",children:[
		{},{}
	]}
	主路由组件的模板中写<router-outlet>
	//注意：访问子路由不能/开头，用./开头，在当前路由下面找
	<a [routerLink]="["./xx"]">
	注意：组件和路由信息是分离的，组件本身并不知道路由信息

辅助路由：
	1、组件的模块上出了主的插座，
	还要声明一个有name的插座,在主插座的旁边
		<router-outlet></router-outlet>
		<router-outlet name="aux"></router-outlet>
		//配置加了属性outlet就只能显示在名字叫aux的插座上。
		{path:"console",outlet:"aux"}
		//跳转的时候，点击xxx，home显示在主插座，pathname显示在辅助插座
		<a [routerLink]="['/home'],{outlets:{aux:"pathname"}}">xxx</a>
		//其实没跳转
		<a [routerLink]="[{outlets:{aux:"console"}}">开始资讯x</a>
		<a [routerLink]="[{outlets:{aux:null}}">结束资讯x</a>
		//还可以控制主插座,点击开始资讯：主插座跳到home,
		<a [routerLink]="[{outlets:{primary:"home",aux:"console"}}">开始资讯x</a>

路由守卫：
	CanActivate:处理导航到某路由的情况
		比如付费会员才能打开股票详情路由
	CanDeactivate:处理从当前路由离开的情况
	Resolve:在路由激活之前获取路由数据。用在费时的异步获取数据，避免数据渲染不了。
	//CanActivate-----：
	export class PermissionGuard implements CanActivate{
		canActivate(){
			var hasPermission:boolean=Math.ramdom()<0.5;
			if(!hasPermission){
				console.log("用户无权访问");
			}
			return hasPermission;
		}
	}
	//配置路由 PermissionGuard需要在跟模块的provider声明
	{path:"",canActivate:[{PermissionGuard}]}
	
	//CanDeactivate----：
	//离开StockComp这个组件会...
	export class FocusGuard implements CanDeactivate<StockComp>{
		canDeactivate(comp:StockComp){
			if(comp.isFocus()){
				return true;//直接离开
			}else{
				return window.confirm("不关注就离开么，这股票能赚钱哦");;
			}
			
		}
	}
	//配置路由 FocusGuad要import,跟模块要写入provider
	{path:"",canDeactivate:[FocusGuad]}

	//Resolve守卫--：泛型：Stock，需要读取这个数据。
	@Injectable() //让当前的对象支持依赖注入, @Component 继承了 @Injectable
	export class StockResolve implements Resolve<Stock>{
		resolve(route:ActivatedRouteSnapshot,
		state:RouterStateSnap,

		){
			let id=route.params['id'];
			if(id===1){
				return new Stock(1,"IBM");
			}else{
				this.router.navigatate(["/home"]);
				return undefined;
			}
		}
	}
	//路由配置 resolve是一个对象，上面两个是数组。
	//意思是：当进入某个路由的时候，需要携带一个数据，数据名是stock,数据值由守卫StockResolve提供
	{path:"xx",resolve:{stock:StockResolve}}
	//组件中：
	ngOnInit(){
		this.routerInfo.data.subscribe((data:{stock:Stock}})=>{
			this.stock=data.stock;
		});
	}


--------------------------------------------------------------------------
【依赖注入】
依赖注入：
	ng控制反转是通过依赖注入实现的。
	简称DI.
	场景：写了一个方法，方法的参数是一个对象，当调用这个方法时
	+需要实例化对象并传递给方法，
	createShipment(new Product());
	噢，难怪constructor(public router:Router){};
控制反转：将依赖的控制权从代码的内部转移到代码的外部。


依赖注入的好处：
	松耦合
	可测性

注入器：
	一般不需要调用注入器的方法，
	注入器会根据组件的构造函数，自动将组件依赖的对象实例注入进组件
	constructor(private productService:ProdocuService){...};
提供器：
	providers:[ProductSerivice]
	等效于：(上面是简写，当provide和useClass相等时可以简写)
	providers:[{provide:ProductService,useClass:ProductService}]
	//说明[{provide:这个是constructor声明的类型,useClass:是实际上实例化的类
	//在提供器修改类型-----：
	方法1：providers:[{provide:ProductService,useClass:AnotherProductService}]
	方法2：providers:[{provide:ProductService,useFactory:()->{..}}]
提供器的作用域：
	模块中声明providers VS 组件中声明providers:
	@NgModule({})  @Component({providers:[{}]}) 
	模块中声明提供器：对模块中所有组件可见，会影响模块中所有用到那个服务的地方；
	组件中声明提供器：只对当前组件可见和后代组件可见。
	声明在组件中的提供器会覆盖声明在模块中声明的提供器。
@Injectable()注解：
	可以让constructor(){}
	@Component 是 @Injectable装饰器的子类。
服务之间相互注入：
	1、要声明 @Injectable()注解的服务才可以注入别的服务
	2、被注入的服务一定要在模块的providers中声明，才可见。
提供器的高级用法：
	使用工厂方法和值对象定义提供器。
	场景：实例需要参数或条件的时候
	providers:[
		{
			provide:StockService,useFactory:(logger:LoggerSerivice,isDev)=>{
				if(isDev){
					return StockService(Logger);
				}else{
					return AnotherStockService(Logger);
				}
			},deps:[LoggerService,'IS_DEV_ENV']
		},
		LoggerService,
		{
			provide:"IS_DEV_ENV",useValue:false
		}
	]
	注意：工厂方法是单例，只会在第一次需要的时候调用一次。


注入器的层级关系：



---------------------------------------------------------------------------
数据绑定：
	{{data}}
	<img [src]="imgUrl">
	<button (click)="doSomething()">
	默认的数据绑定是单向的：要么把组件控制器的属性绑定到模板上，如前两种；
		要么把模板上的事件绑定到控制器的方法上，如第三种。
	可以通过明确指定的方式来进行双向绑定。
事件绑定：
	<button (click)="doSomething($event)"></button>
	exports class xxComp{
		doSomething(){
			console.log("点击事件");
		}
	}
	//还可以
	<button (click)="saved=true">
	
自定义事件：

属性绑定：
	[src]="url"
	等于
	src="{{url}}"
	//区别html属性和dom属性
	//button的disabled属性
		<button disabled="false"> 
		html属性的值不能控制禁用，但是dom属性设置成t/f可以控制禁用
1、插值表达式=dom属性绑定。
2、浏览器会自动同步html属性和dom属性。
html属性和dom属性：
	少量的htm属性和dom属性之间存在着1:1的关系，如id
	有些Html属性没有对应的dom属性，如colspan，
	有些dom属性没有对应的html属性，如textContent
	就算名字相同，html属性和Dom属性也不是同一样东西
	html属性的值指定了初始值；dom属性的值表示当前值
	dom属性的值可以改变；html属性的值不会改变
	ng的模板绑定是通过dom属性和事件来工作的，而不是html属性
Html属性绑定语法：
	基本的html属性绑定；<td [attr.colspan]="tableColspan">
	css类绑定 <div class="aa" [class]="someExp">//这种后面会替换前面所有的class
		<div [class.error]="isError">//表达式是一个布尔值
		<div [ngClass]="{aaa:isA,bb:isB}">//同理管理多个类名

	样式绑定：[style.color]="isError?red:blue"
		[ngStyle]="{'font-style':this.canSave?'italic':'normal'}"//同时设置多个内联样式
		//还可以[style.font-size.em]="num"
		
双向绑定：
	视图和模型保持同步。
	[(ngModule)]="val"

------------------------------------------------------
响应式编程rxjs：
	异步事件流
	import {Observable} from "rxjs"
	constructor(){
		Observable.from([1,2,3,4])
		.filter(e=>e%2==0)
		.map(e=>e*e)
		.subscribe(
			e=>console.log(e),
			err=>console.log(err),//调错
		);
	}

	//怎么用？比如搜索
	1跟模块引入模块：ReactiveFormsModule
	2控制器中声明：searchInput:FormControl=new ForomControl();
	3模板中：<input [formContrl]="searchInput">
	组件中引入import "rxjs/Rx";
	4订阅事件:constructor(){
		this.searchInput
		.valChanges
		.debounceTIme(500)
		.subscribe(stockCode=>getStockInfo());
	}
观察者模式：
	可观察对象---(调用)--->观察者
	可观察对象<---(注册)---观察者
管道：
	

	
--------------------------
组件间通讯>>
组件输入属性：被 @Input( )装饰器修饰的属性，用来从父组件接收信息
	只有在用父子关系的组件间才能用输入属性传递数据。
组件输出属性：
	//子组件
	@Output data:EventEmitter<Stock>=new EventEmitter();
	this.data.emit(new Stock());
	//父组件
	<div (data)='doSome($event)' > //$event是new Stock();
中间人模式
	不存在父子关系的组件通讯。

组件生命周期-------------
@ViewChild('childname')
child1:ChildComponent;
然后就可以调用子组件的方法。


1.a子组件：
	<ng-content></ng-content>
1.b父组件：
	<app-child>
		<div>这段内容会放进app-child的ng-content的投影点</div>
	</app-child>
2.a子组件：<ng-content select=".a"></ng-content>
	<ng-content select=".b"></ng-content>
2.b父组件：<div class="a"></div>
	<div class="b"></div>


钩子
constructor:初始化实例参数
ngOnChanges:初始化输入属性
ngOnInit:初始化输入属性之外的其他属性
ngDoCheck:做一次变更检查
ngAfterContentInit:投影ng-content初始化完毕
ngAfterContentCheck:投影
ngAfterViewInit:组件的初始化完毕，其中所有子组件都初始化完毕
ngAfterViewChecked:
一旦用户有交互（点击，输入等），所有活动组件的带有check的钩子都会被调用。如果导致某个组件的输入也改变了，
+那么那个组件的ngOnchenges也会被调用。
ngOnDestory：路由切换会导致钩子被调用。
ng的变化发现机制





	
