vue 基础知识

-----大纲：------

实例，组件，指令，内置组件，实例方法，实例选项；
模板渲染，条件渲染，组件交互，标签属性，事件绑定，计算属性；
属性监听，表单，动画；

vue-cli项目搭建；
vue-router路由；
uvex;


------ 优势 -----

数据渲染/数据同步（）
组件化/模块化（<my-component></my-component>）
其他功能：路由,ajax，数据流

响应式-双向绑定:视图和js数据
组件:
单文件组件：


----------------------------
问：怎么处理.vue结尾的文件？
答：webpack+vue-loader；Browserify+vueify

问：什么是vue实例对象？
答：全局会有Vue这个构造函数，用new Vue({..})得到的对象;

问：实例化VUE实例对象常用哪些参数？
答：
	el:‘#app/.class/body';挂载点
	template:'<div><other-comp>...</div>';
	componets:{App},
	data:{
		‘msg’:'hello',实例对象的数据
	}；实例对象会代理data的数据。

问：实例的生命周期？
答：钩子。beforeCreate,created,beforeMounted,mounted,等


问：如何实现跟组件、组件之间的相互关系？
答：
通过：Vue.component（）全局注册
1组件注册：全局组件Vue.component('comp-name',{配置});
2然后在Html里用<comp-name></comp-name>

通过配置选项componets局部注册。
1、var comp-name={一份配置}
2、配置选项components:{'comp-name':comp-name}
3、html里面用<comp-name></comp-name>



----------------注意------------------------------

1、组件的data避免引用赋值，因为会导致一个组件用在几个地方时公用一份数据
解决：data:function(){
	return {
		m:'1',n:'2'
	}
}
2、


组件要使用Vue，要import Vue form '';



------------------基本概念------------

components:给当前组件注册哪些子组件，注册了才能用；
render:function(h){h(App)} h是一个参数，App是import的组件
单文件组件：<template>定义模板；<script>定义js，<style>定义样式；
	<style scoped>:单文件组件的样式只应用当前模板。
	<style lang='less'>:定义样式是Less语言。

全局api:实例对象的全局方法。
实例选项：创建组件所传入的对象。
实例属性/方法：root.$data,root.$on(...); $开头的。
指令：写在模板里面，通过模板与数据交互的方法，v-html='' v-on:keydown.enter=
内置组件：不需要声明可以直接用的组件。有：<keep-alive><router-view></router-view></keep-alive>
<keep-alive>:内置组件，缓存访问过的组件。



---------基本用法-------------


v-html，v-text ：数据绑定到页面某个元素的innerHTML。
{{}}：里面可以用三目运算符。

<p v-text="xx">=={{x}}


v-for：列表渲染----------。
	<p v-for="item in listArr">{{item.name}}</p>
	<p v-for="(item,index) in listArr"> 2.0一定要这样获取index
	<p v-for="value in listObj">{{value}}</p>
	<p v-for="(value,key) in listObj">{{value+key}}</p>
	组件也可以循环渲染


关于组件的命名----------：
1.0不能compA,一定要写成comp-a
2.0可以compA


列表数据的同步更新方法---------：
v-on="methodName"
通过各种方式（官网有些）更新data中的数组，相关视图就会更新。
contact(),slice()，直接改变数组的长度，直接为其中某项赋值（arr[2]='hello'）不会触发视图的更新。
通过全局方法Vue.set(this.data的哪个数据,第几项,新值)，可以使视图得到更新;



Vue标签属性和条件渲染--------
动态绑定v-bind:href="link" 其中link是data:{link:'1.html'}，link更改后href也会改变。
使用v-bind，后面是变量名；不使用v-bind，后面就是一个字符串。

v-if:
	<p v-if='isOpen'>is open</p><p v-else>not open</p>

v-show:
	<p v-show="!isOpen">

v-else:配合v-if/v-else来使用的

v-show是通过display来改变，v-if是通过删除插入dom来改变。



class的绑定，需要仔细看---
用数组，用对象。
:class=[a,{'b':hasError}]


style的绑定，也要仔细看----



事件绑定-----
v-on:click.stop= 阻止事件冒泡
v-on:keydown.enter= 按enter键的时候执行
v-on:keydown.13= 按13键的时候执行

自定义事件-------------------
父组件监听了子组件的自定义事件，
什么时候触发呢，等子组件调用this.$emit('自定义事件名')的时候;
1、import 
2、components:{}
3、<compA @my-event='onComaMyEvent'></compA>
4、onComaMyEvent是父组件一个method，接受6传来的参数。
5、子组件<button @click="cc">
6、子组件methods:cc:function(){
	this.$emit('my-event',this.hello);//my-event是第三步的，后面的是参数
}

表单事件绑定-------
特点：双向绑定。
input事件绑定：<input v-model="uname">
v-model.lazy :  输入彻底完成(blur/enter)后才更新渲染。
v-model.number: 把输入的转为数字。用typeof出来是number。
v-model.trim:   去掉前后的空格。

复选框：
myVal是data中的一项，是数组类型。
<input type='checkbox' name="" value="1" v-model='myVal'><label>aa</label>
<input type='checkbox' name="" value="2" v-model='myVal'><label>bb</label>
<input type='checkbox' name="" value="3" v-model='myVal'><label>cc</label>

单选框：
myVal是data中的一项，是字符串类型。
<input type='radio' name="" value="1" v-model='myVal'><label>aa</label>
<input type='radio' name="" value="2" v-model='myVal'><label>bb</label>
<input type='radio' name="" value="3" v-model='myVal'><label>cc</label>

select:
<select v-model="myVal">
	<option value="0">0</option>
	<option value="1">1</option>
	<option value="2">2</option>
</select>


自定义表单组件--------
其实是用div模仿。
<v-select :options="options">
子组件：props:[
	options:[Array],
	options22:[Array,String]
]


【计算属性和数据监听----------
data:{
	a:""
},
computed:{
//【根据其他数据的变化】，来同步更新得到新的值。为了得到一个结果。
	val:function(){
		return this.a.replace(/\d/g,"");
	}
},
watch:{
//有个列表，可能会被增加，删除，等
	myVal:function(val,oldVal){
		this.tellUser();
	}
},
methods:{
	tellUser:function(){
		//
	}
}




【组件之间的通信----------------------

【一个项目只有一个实例化Vue对象，
import Vue form 'vue'
import App form './App'
new Vue({
	el:'#app',
	render:function(h){h(App)}
});

【如何在父组件渲染子组件的内容？
1、import 得到一份配置
2、components选择注册子组件
3、template里使用

说一句：属性名和自定义事件名，不支持驼峰命名。


【子组件->父组件：events emit------


【父组件->子组件：props pass ------
父组件<com-a number-to-do=5></com-a>
子组件：
1、<p v-text="numberToDo"> 
2、props:['number-to-do'] //number没必要再在data里声明

动态的传递：父组件<com-a v-bind:my-val='MyVal'></com-a>


【插槽----------------------：
父组件：
<com-a v-bind:my-val='MyVal'>
	<a>你好</a>
</com-a>
子组件：<slot>no slot</slot> //slot可以写个默认值比如 no slot

【具名slot:
子组件：
<slot name="header">no header lot</slot>
slot name="footer">no footer lot</slot>
父组件：
<com-a v-bind:my-val='MyVal'>
	<a slot="header">这是头部</a>
	<a slot="footer">这是尾部部</a>
</com-a>



【动态组件--------
修改comToRender的值，就会引入不同的组件。
<p :is="comToRender">
动态组件支持<keep-alive>标签：
	<keep-alive><p :is="comToRender"></p></keep-alive>


【过度动画-------
需要v-show配合。
<transition name='fade/自己起个名字blink'>
	<p v-show="isOpen"></p>
</transition>

【css过度：v-enter -> v-enter-active,v-leave -> /v-leave-active
.fade-enter-active,.fade-leave-active{
	transition:all 0.5s ease-out;
	//opacity默认就是1，不用写。
}
.fade-enter,.fade-leave{
	opacity:0;
}
注意：position:absolute;改变left，这个left不会被transition接受？？？？？？。
v-enter-active和v-leave就是要展现的状态，一般不需要设置。

接受的过度：v-show,v-if,动态的组件。
动态的组件默认过渡：先进入进的in-out，后出去旧的。解决：<transition mode="out-in">
注意：<p v-if=""></p><p v-else></p>标签名相同，需要指定不同的key才能出现过渡<p key="xx">。


【js过度。
<transition
	v-on:before-enter="某个method"
	v-on:enter="某个method"
	v-on:after-enter="某个method"
	v-on:enter-cancelled="某个method"
>
注意：
1、给transition加上：v-bind:css='false'，避免过渡过程中css的影响。
2、el是transition里面的dom元素：method_beforeEnter:function(el){} ;//
3、method的第二个参数done,在enter和leave中必须调用，method_enter:function(el,done){done();}


【用jq--
放在index.html的head里的script里。
$(..).animate({
	left:0
},{
	duration:1500,
	complete:done//js过渡中enter和leave必须调用的
});




【自定义指令-----
v-for,v-if，等，自带指令。
目标：v-css
how:
方法1组件内部使用：
	配置directives{css:{nserted(){},},}。
方法2全局使用：
	Vue.directive('v-css',{
		inserted(el,bind){
			//bind是指令的值。 v-css="what"
			//what 会去data里找。就想要字符串："'string'"
			
		},
		bind(el,bind){
			//将指令绑定到元素上阶段，只会执行一次
		}
	});


实现v-focus，进入页面的时候选中<input v-focus>：（自带的指定实现不了）。
inserted(el,bind){
	el.focus();	
}



【插件----------
功能丰富的组件。
比如：v-router、vuex。
通常的安装流程：
	cnpm install vue-router,vuex --save-dev

min.js 中：
1、引入：import viewRouter form 'vue-router'
2、注册：Vue.use(viewRouter);
3、实例化一个let router=new viewRouter();
4、以参数的形式写给跟组件new Vue({router});


vueResource:引入，不用实例化，Vue.use(vueResource);
然后所有组件都可以用this.$http.get();


【单文件组件---
.vue的一个文件，集合了template,script,style
实现是得益于webpack和vue-loader


【vue-cli-----
优势：成熟的vue项目架构设计，本地的测试服务器，集成打包上线方案
要求：node.js(>=4.0) Git
使用流程：
	npm install vue-cli -g
	vue init webpack my-project
	npm install //安装依赖
	npm run dev/buld

【nodeJs--
非default导出：
	导出：let com={};export {com} ;
	引用需要import {comp} form ".."

【vue-router---
根据不同的地址跳到不同的页面。

前端路由 VS 传统路由----
传统路由，不同页面跳转的时候所有资源都要更新；

路由设置--
1、在入口文件里引入VRouter
2、注册：Vue.use(VRouter);
3、写路由map:
let router=new Vrouter({
	mode:'history',//可以用浏览器的前进后退，hash-#也不见了
	routes:[
		{
			path:'/a',//什么样的地址使用什么样的comp
			component:compA
		},
		{
			path:'/b',
			component:compB
		}
	]
});
4、跟实例插入new Vue({
	router,//es6的简写
});
5、渲染位置：template里写：<router-view></router-view>
注意：vue的路由加了hash"#": 。。。/#/a
6、跳转：<router-link :to="{path:'a'}">to a</router-link>

【路由参数：../a?code=1
1、映射表 
path:"/a/:code"
path:"/a/:code/detail/:type"
2、组件内部获取参数：this.$route.params
注意：添加了参数后，必须完整的匹配参数才能映射到

【路由嵌套--
1、映射表{
	path:"/a",
	name:'rName'
	component:compA，//
	children:[
		{
			path:"red"
			component:redCompA
		}
	]
}
2、所以compA里面就需要一个<router-view>
3、<router-link :to="{path:a/red}">


【router-link的多种使用方式---
<router-link to="a"> 基于当前路径，跳到a
<router-link tag="li">把默认的a改为li
<router-link :to="{path:'a',param:{code:123}}"> 参数传递
//编程式导航--??
router.beforeEach();
router.push({path:'apple'});

【路由重定向---
修改映射：routes:[{path:""/,redirect:"/a"}]


【具名路由---
<router-link to="{name:'rName'}"> 访问具名路由

【命名的视图---
<router-view name="viewA'>
映射：component:{
	viewA:compA,
	viewB:compB
}

【过渡+keepalive+路由切换
<transition name="fade">
	<keep-alive>
		<router-view><router-view>
	</keep-alive>
</transition>



【状态管理器 vuex----
1、为什么：
	数据和组件很多，组件之间共享状态，一个地方改变，其他地方也需要改变。
	如果用时间和this.$emit()通知，地方多了会变得很复杂。
2、原理：
	把所有数据放在一个store里面。
	action执行异步的操作-(commit)->mutations同步更改state数据->state->vue comp
3、怎么用：
	1、cnpm install vuex --save
	2、入口js中:import
	3、Vue.use(Vuex);
	4、实例化store:let store=new Vuex.store({
		state:{totalPrice:0},//数据中心
		mutations:{//动作
			increment:(state,price){
				//第一个参数state是默认的，第二个是传递的
				state.totalPrice+=price;
			}
		},
		actions:{//在mutaion之前的动作,只能调用mutation,不能更改state
			increse(context，price){
				context.commit('increment',price)
			},
			add(context,id){
				//用id到服务器获取数据
				//再触发mutations
			}
		
		},
		getters:{
			getTotal(state){//默认的第一个参数
				return state.totalPrice;
			}
		}
	});
	5、new Vue({store});
	6、每个子组件就可以从store的state里获取数据。this.$store.state.totalPrice访问数据中心的数据
	7、每个组件中可以调用store的动作mutations，同时传递参数。this.$stote.commit('increment',this.price);//this.price是data{price:5}
	8、每个子组件就可以调用store的action.this.$store.dispatch('increse',this.price);
	9、从stote的getters里获取数据：this.$store.getters.getTotal();
4、好处：
	无论哪个子组件调用store的动作改变了store的数据中心，其他用了数据中心数据的组件也会发生跟新。
5、mutations和action的区别：
	action里面可以进行一些异步的操作，再触发mutation
	mutation必须是一些同步的操作。
6、从state里获取和从getters获取数据有什么区别？
7、module:
	1每个moudule都有自己的一套state,getters,mutations,action
	2、const store=new Vuex.store({
		modules:{
			a:moduleA,
			b:moduleB
		}
	});
	3、store.state.a // -> moduleA's state
8、推荐结构，官方有demo.


//


